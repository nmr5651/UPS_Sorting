{"version":3,"sources":["media/corrrect.mp3","media/wrong.mp3","media/labelside.png","media/upslogo.png","Components/PlayingField.js","Components/TopNav.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PlayingField","useState","apprv","zip","length","color","zipLength","sort","setSort","useSound","correctSound","volume","correct","incorrectSound","incorrect","checkAnswer","c","boolStat","i","Data","Chart","j","Zipcode","getNumber","randID","Math","floor","random","chartLength","chartRand","chartApprv","Apprv","zipRand","Color","className","onClick","src","Label","alt","e","preventDefault","handleUpdate","TopNav","Logo","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"q6BAAAA,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,mNCkJ5BC,MAlIf,WAAwB,MAIIC,mBAAS,CAC7BC,MAAO,KACPC,IAAK,KACLC,OAAQ,KACRC,MAAO,KACPC,UAAW,OATK,mBAIbC,EAJa,KAIPC,EAJO,OAaFC,YACdC,IACA,CAACC,OAAQ,IAFNC,EAba,sBAkBAH,YAChBI,IACA,CAACF,OAAQ,KAFNG,EAlBa,oBAwBpB,SAASC,EAAYC,GAKjB,IAHA,IAAIC,GAAW,EAGPC,EAAI,EAAGA,EAAIC,EAAKH,GAAGI,MAAMhB,OAAQc,IAErC,IAAI,IAAIG,EAAI,EAAGA,EAAIF,EAAKH,GAAGI,MAAMF,GAAGI,QAAQlB,OAAQiB,IAChD,GAAGd,EAAKJ,MAAQgB,EAAKH,GAAGI,MAAMF,GAAGI,QAAQD,GAAG,CAGxCT,IACAK,GAAW,EACX,OAKI,IAAbA,GAECH,IAIJS,IAQJ,SAASA,IAGL,IAAIC,EAASC,KAAKC,MAAsB,EAAhBD,KAAKE,UAEzBC,EAAcT,EAAKK,GAAQJ,MAAMhB,OAGjCyB,EAAYJ,KAAKC,MAAMD,KAAKE,SAAWC,GAEvCE,EAAaX,EAAKK,GAAQJ,MAAMS,GAAWE,MAE3CzB,EAAYa,EAAKK,GAAQJ,MAAMS,GAAWP,QAAQlB,OAElD4B,EAAUP,KAAKC,MAAMD,KAAKE,SAAWrB,GAGzCE,EAAQ,CACJN,MAAO4B,EACP3B,IAAKgB,EAAKK,GAAQJ,MAAMS,GAAWP,QAAQU,GAC3C5B,OAAQwB,EACRvB,MAAOc,EAAKK,GAAQS,MACpB3B,UAAWA,IAcnB,OACI,yBAAK4B,UAAY,iBAEb,yBAAKA,UAAY,eACb,yBAAKA,UAAY,wBACb,4BAAQA,UAAY,qBAAqBC,QAAW,kBAAMpB,EAAY,KAAtE,UAGA,4BAAQmB,UAAY,wBAAwBC,QAAW,kBAAMpB,EAAY,KAAzE,UAGA,4BAAQmB,UAAY,wBAAwBC,QAAW,kBAAMpB,EAAY,KAAzE,UAGA,4BAAQmB,UAAY,uBAAuBC,QAAW,kBAAMpB,EAAY,KAAxE,WAKJ,yBAAKmB,UAAY,SACb,yBAAKA,UAAY,aAAaE,IAAOC,IAAOC,IAAM,UAClD,4BAAK/B,EAAKL,MAAV,MAAoBK,EAAKJ,MAG7B,yBAAK+B,UAAY,sBACb,4BAAQA,UAAY,kBAAkBC,QAAW,SAAAI,GAAC,OAhClE,SAAsBA,GAClBA,EAAEC,iBAEFjB,IA6BkEkB,CAAaF,KAAnE,gB,iBC/GLG,MAjBf,WAEI,OACI,yBAAKR,UAAY,oBACb,yBAAKA,UAAY,kBACb,yBAAKA,UAAY,OAAME,IAAOO,IAAML,IAAM,SAE9C,yBAAKJ,UAAY,UACb,sEACA,4CACA,6FACA,6HACA,kHCJDU,MATf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0a47bf6c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/corrrect.8e3d6124.mp3\";","module.exports = __webpack_public_path__ + \"static/media/wrong.8c5e3298.mp3\";","module.exports = __webpack_public_path__ + \"static/media/labelside.cbf956ff.png\";","module.exports = __webpack_public_path__ + \"static/media/upslogo.881843a7.png\";","// Main React import to make everything work\r\n// As well as local json file that holds all values for boxes\r\nimport React, {useState} from 'react';\r\nimport Data from '../Data/sortData.json';\r\n\r\n// All of the imports for sound-related actions\r\nimport useSound from 'use-sound';\r\nimport correctSound from '../media/corrrect.mp3';\r\nimport incorrectSound from '../media/wrong.mp3';\r\n\r\n// Main css file that is used to style everything for now\r\nimport \"../App.css\";\r\n\r\nimport Label from '../media/labelside.png';\r\n\r\n// Main function that will hold most of the important code\r\nfunction PlayingField() {\r\n\r\n    // State initalized with all of the approiate information\r\n    // Will be filled in during the retrieval of the Randomly Generated Labels\r\n    const [sort, setSort] = useState({\r\n        apprv: null,\r\n        zip: null,\r\n        length: null,\r\n        color: null,\r\n        zipLength: null\r\n    });\r\n\r\n    // Constant that will play the \"correct-answer\" sound when method is ran\r\n    const [correct] = useSound(\r\n        correctSound,\r\n        {volume: 1}\r\n    );\r\n    // Constat to play the \"incorrect-answer\" sound when funciton runs\r\n    const [incorrect] = useSound(\r\n        incorrectSound,\r\n        {volume: 0.6}\r\n    );\r\n\r\n    // Function that will check if the answer the user picked is correct/incorrect\r\n    function checkAnswer(c){\r\n        // Check if the answer is correct or not\r\n        var boolStat = false;\r\n\r\n        // Loop for the First set of indexs of Json\r\n        for(var i = 0; i < Data[c].Chart.length; i++){\r\n            // Loop for the array of zipcodes within each index\r\n            for(var j = 0; j < Data[c].Chart[i].Zipcode.length; j++){\r\n                if(sort.zip === Data[c].Chart[i].Zipcode[j]){\r\n                    \r\n                    // Runs correct sound function\r\n                    correct();\r\n                    boolStat = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        if(boolStat === false){\r\n            // Runs the incorrect sound function\r\n            incorrect();\r\n        }\r\n\r\n        // Runs the function to retreive another random label\r\n        getNumber();\r\n    }\r\n\r\n    /*\r\n     * Function to randomly generate a label from the Json file\r\n     * Seems very confusing, and maybe there is a better way of doing\r\n     * such a task but I found myself doing it this way\r\n     */\r\n    function getNumber(){\r\n\r\n        // Will generate a number between 1-4 that will assoicate to a certain color\r\n        var randID = Math.floor(Math.random() * 4);\r\n        // Grabs the length of the amount of different states that color is assoicated to\r\n        var chartLength = Data[randID].Chart.length;\r\n        // Grabs a random index of the length found abve\r\n        // The length varies between each index\r\n        var chartRand = Math.floor(Math.random() * chartLength);\r\n        // Based on the values generated above, grabs the state apprvation assoicated with above index\r\n        var chartApprv = Data[randID].Chart[chartRand].Apprv;\r\n        // Grabs the length of the zipcode array assoicate with the 'chartRand' found above\r\n        var zipLength = Data[randID].Chart[chartRand].Zipcode.length;\r\n        // Generates a random number from the length of the array of zipcodes in assoicated outer index\r\n        var zipRand = Math.floor(Math.random() * zipLength);\r\n        \r\n        // Set the state with the apporatate data found above\r\n        setSort({\r\n            apprv: chartApprv,\r\n            zip: Data[randID].Chart[chartRand].Zipcode[zipRand],\r\n            length: chartLength,\r\n            color: Data[randID].Color,\r\n            zipLength: zipLength\r\n        })\r\n\r\n    }\r\n\r\n    // Function that is ran from the click of the generate button\r\n    // Don't know exactly why I need the preventDefualt() but its necessary\r\n    function handleUpdate(e){\r\n        e.preventDefault();\r\n        // Runs the function to generate data for the label\r\n        getNumber();\r\n    }\r\n\r\n\r\n    return (\r\n        <div className = \"playing-field\">\r\n\r\n            <div className = \"inner-field\">\r\n                <div className = \"colored-button-group\">\r\n                    <button className = \"colored-button red\" onClick = {() => checkAnswer(0)}>\r\n                        Placer\r\n                    </button>\r\n                    <button className = \"colored-button yellow\" onClick = {() => checkAnswer(1)}>\r\n                        Placer\r\n                    </button>\r\n                    <button className = \"colored-button orange\" onClick = {() => checkAnswer(2)}>\r\n                        Placer\r\n                    </button>\r\n                    <button className = \"colored-button brown\" onClick = {() => checkAnswer(3)}>\r\n                        Placer\r\n                    </button>\r\n                </div>\r\n\r\n                <div className = \"label\">\r\n                    <img className = \"frontlabel\" src = {Label} alt = \"front\"/>\r\n                    <h2>{sort.apprv}   {sort.zip}</h2>\r\n                </div>\r\n                \r\n                <div className = \"generate-container\">\r\n                    <button className = \"generate-button\" onClick = {e => handleUpdate(e)}>\r\n                        Generate\r\n                    </button>\r\n                </div>\r\n                \r\n                \r\n            \r\n            </div>\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default PlayingField;\r\n\r\n","import React from 'react';\r\nimport '../App.css';\r\n\r\nimport Logo from '../media/upslogo.png';\r\n\r\nfunction TopNav(){\r\n\r\n    return(\r\n        <div className = \"TopNav-container\">\r\n            <div className = \"logo-container\">\r\n                <img className = \"logo\"src = {Logo} alt = \"UPS\"/>\r\n            </div>\r\n            <div className = \"header\">\r\n                <h2>UPS Sorting Game - Nashua Hub in a Box</h2>\r\n                <h4>Instructions</h4>\r\n                <p>Simply click on the 'Generate' button create and random label.</p>\r\n                <p>Then click on one of the colored buttons that represents which belt that package should go on.</p>\r\n                <p>You will hear a ding for a correct answer, and a buzzer for an incorrect answer.</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default TopNav;","import React from 'react';\r\nimport PlayingField from './Components/PlayingField';\r\nimport TopNav from './Components/TopNav';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <TopNav/>\r\n      <PlayingField/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}